name: PR Auto Approve Gatekeeper

on:
  repository_dispatch:
    types: [check-finished]

jobs:
  gatekeeper:
    runs-on: ubuntu-latest
    steps:
      - name: Auto approve if repo owner
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_APPROVER_TOKEN }}
          script: |
            const numChecks = 2;
            const retryDelay = 15; // 15 sec
            const sha = context.payload.client_payload.sha;
            const prNumber = context.payload.client_payload.pr;

            if (!prNumber) {
              console.log("üö´ No PR number found ‚Äî skipping");
              return;
            }

            // Get PR info
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const prAuthor = pr.user.login;
            console.log(`PR author: ${prAuthor}`);

            // Check collaborator permissions
            const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: prAuthor
            });

            console.log(`Permission level for ${prAuthor}: ${perm.permission}`);

            if (perm.permission === "write" || perm.permission === "admin") {
              let allGreen = false;
              for (let attempt = 0; attempt < numChecks; attempt++) {
                const { data: checks } = await github.rest.checks.listForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: sha
                });

                console.log("Check runs:");
                hecks.check_runs.forEach(c => {
                  console.log(`- ${c.name}: ${c.status}, ${c.conclusion}`);
                });

                // Filter out only completed checks
                const completedChecks = checks.check_runs.filter(c => c.status === "completed");

                // Filter out only completed checks
                const notCompletedChecks = checks.check_runs.filter(c => c.status !== "completed");

                // Separate passed/skipped vs failed/cancelled
                const failedOrCancelled = completedChecks.filter(c =>
                  c.conclusion === "failure" || c.conclusion === "cancelled"
                );

                if (failedOrCancelled.length > 0) {
                  console.log("‚ùå Some checks failed or were cancelled:");
                  failedOrCancelled.forEach(c => {
                    console.log(`- ${c.name}: ${c.conclusion}`);
                  });
                  return; // stop here, do not approve PR
                }

                if (notCompletedChecks.length == 0 && false) {
                  allGreen = true;
                  break;
                } 
                
                console.log(`Attempt ${attempt+1}: not all checks were completed. Waiting for ${notCompletedChecks.length} check(s)`);

                // wait before next poll
                await new Promise(r => setTimeout(r, 1000 * retryDelay));
              }

              if (!allGreen) {
                console.log("‚è≥ Not all checks passed after retries ‚Äî skipping");
                return;
              }

              console.log("‚úÖ All checks passed & PR author is maintainer ‚Äî approving PR");
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: "APPROVE"
              });
            } else {
              console.log("üë• PR author is not a maintainer ‚Äî skipping auto-approve");
            }
