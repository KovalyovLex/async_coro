name: PR Auto Approve Gatekeeper

on:
  repository_dispatch:
    types: [check-finished]

jobs:
  gatekeeper:
    runs-on: ubuntu-latest
    steps:
      - name: Auto approve if repo owner
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_APPROVER_TOKEN }}
          script: |
            const numChecks = 5;
            const retryDelay = 15; // 15 sec
            const sha = context.payload.client_payload.sha;
            const prNumber = context.payload.client_payload.pr;

            if (!prNumber) {
              console.log("üö´ No PR number found ‚Äî skipping");
              return;
            }

            // Get PR info
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const prAuthor = pr.user.login;
            console.log(`PR author: ${prAuthor}`);

            // Check collaborator permissions
            const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: prAuthor
            });

            console.log(`Permission level for ${prAuthor}: ${perm.permission}`);

            if (perm.permission === "write" || perm.permission === "admin") {
              let allGreen = false;
              for (let attempt = 0; attempt < numChecks; attempt++) {
                const { data: combined } = await github.rest.repos.getCombinedStatusForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: sha
                });
                console.log(`Attempt ${attempt+1}: combined state = ${combined.state}`);
                if (combined.state === "success") {
                  allGreen = true;
                  break;
                }
                // wait before next poll
                await new Promise(r => setTimeout(r, 1000 * retryDelay));
              }

              if (!allGreen) {
                console.log("‚è≥ Not all checks passed after retries ‚Äî skipping");
                return;
              }

              console.log("‚úÖ All checks passed & PR author is maintainer ‚Äî approving PR");
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: "APPROVE"
              });
            } else {
              console.log("üë• PR author is not a maintainer ‚Äî skipping auto-approve");
            }
