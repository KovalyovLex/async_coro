name: PR Auto Approve Gatekeeper

on:
  repository_dispatch:
    types: [check-finished]

jobs:
  check-maintainer:
    runs-on: ubuntu-latest
    outputs:
      isMaintainer: ${{ steps.check.outputs.needApprove }}
    steps:
      - name: Check if PR author is a maintainer
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const numChecks = 3;
            const retryDelay = 15; // 15 sec
            const sha = context.payload.client_payload.sha;
            const prNumber = context.payload.client_payload.pr;

            console.log(`Checking status for PR: ${prNumber}, commit: ${sha}`);

            if (!prNumber) {
              console.log("üö´ No PR number found ‚Äî skipping");
              return false;
            }

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: pr.user.login
            });

            console.log(`PR author permission: ${perm.permission}`);
            if (perm.permission === "admin" || perm.permission === "write") {
              let allGreen = false;
              for (let attempt = 0; attempt < numChecks; attempt++) {
                const { data: runsForRepo } = await github.rest.actions.listWorkflowRunsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head_sha: sha,
                  per_page: 30
                });

                // Filter for the specific commit
                const runs = runsForRepo.workflow_runs.filter(r => r.head_sha === sha);

                if (!runs || runs.length == 0) {
                  console.log(`‚ùå No workflow runs found for commit ${sha}`);
                  return false;
                }
                
                console.log("Check runs:");
                runs.forEach(c => {
                  console.log(`- ${c.name}: ${c.status}, ${c.conclusion}`);
                });

                // Filter out only completed checks
                const completedChecks = runs.filter(c => c.status === "completed");

                // Filter out only completed checks
                const notCompletedChecks = runs.filter(c => c.status !== "completed");

                // Separate passed/skipped vs failed/cancelled
                const failedOrCancelled = completedChecks.filter(c =>
                  c.conclusion === "failure" || c.conclusion === "cancelled"
                );

                if (failedOrCancelled.length > 0) {
                  console.log("‚ùå Some checks failed or were cancelled:");
                  failedOrCancelled.forEach(c => {
                    console.log(`- ${c.name}: ${c.conclusion}`);
                  });
                  return false; // stop here, do not approve PR
                }

                if (notCompletedChecks.length == 0) {
                  allGreen = true;
                  break;
                }
                
                console.log(`Attempt ${attempt+1}: not all checks were completed. Waiting for ${notCompletedChecks.length} check(s)`);

                // wait before next poll
                await new Promise(r => setTimeout(r, 1000 * retryDelay));
              }

              if (allGreen) {
                console.log("‚úÖ All checks passed & PR author is maintainer");
              }
              else {
                console.log("‚è≥ Not all checks passed after retries");
              }

              return allGreen;
            }

            return false;

  approve-pr:
    needs: check-maintainer
    if: needs.check-maintainer.outputs.needApprove == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Approve PR using bot
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_APPROVER_TOKEN }}
          script: |
            const prNumber = context.payload.client_payload.pr;

            console.log("‚úÖ Approving PR");
            
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              event: "APPROVE"
            });
