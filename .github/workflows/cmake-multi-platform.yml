name: C++ build (with CMake) and run tests on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-gcc:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        exceptions: [
          {
            name: "",
            cmake: -DASYNC_CORO_NO_EXCEPTIONS=FALSE
          },
          {
            name: "-noexcept",
            cmake: -DASYNC_CORO_NO_EXCEPTIONS=TRUE
          },
        ]
        sanitizers: [
          {
            name: "",
            cmake: -DASAN_ENABLED=FALSE
          },
          {
            name: "-tsan",
            cmake: -DTSAN_ENABLED=TRUE
          },
          {
            name: "-asan",
            cmake: -DASAN_ENABLED=TRUE
          }
        ]


    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
        
    - name: Setup GCC 12
      uses: Dup4/actions-setup-gcc@v1
      with:
        version: 12
      
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=g++
        -DCMAKE_C_COMPILER=gcc
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        ${{ matrix.exceptions.cmake }}
        ${{ matrix.sanitizers.cmake }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --output-on-failure
  
    - name: Archive run logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gcc-run-logs${{matrix.sanitizers.name}}${{matrix.exceptions.name}}
        path: ${{ steps.strings.outputs.build-output-dir }}/Testing/Temporary/LastTest.log

  build-clang:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        exceptions: [
          {
            name: "",
            cmake: -DASYNC_CORO_NO_EXCEPTIONS=FALSE
          },
          {
            name: "-noexcept",
            cmake: -DASYNC_CORO_NO_EXCEPTIONS=TRUE
          },
        ]
        sanitizers: [
          {
            name: "",
            cmake: -DASAN_ENABLED=FALSE
          },
          {
            name: "-tsan",
            cmake: -DTSAN_ENABLED=TRUE
          },
          {
            name: "-asan",
            cmake: -DASAN_ENABLED=TRUE
          }
        ]

    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Clang 20
      run: |
       wget https://apt.llvm.org/llvm.sh
       chmod +x ./llvm.sh
       sudo ./llvm.sh 20

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++-20
        -DCMAKE_C_COMPILER=clang-20
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        ${{ matrix.sanitizers.cmake }}
        ${{ matrix.exceptions.cmake }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --output-on-failure
    
    - name: Archive run logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: clang-run-logs${{matrix.sanitizers.name}}${{matrix.exceptions.name}}
        path: ${{ steps.strings.outputs.build-output-dir }}/Testing/Temporary/LastTest.log
    
  build-msvc:
    runs-on: windows-latest

    strategy:
      fail-fast: true
      matrix:
        exceptions: [
          {
            name: "",
            cmake: -DASYNC_CORO_NO_EXCEPTIONS=FALSE
          },
          {
            name: "-noexcept",
            cmake: -DASYNC_CORO_NO_EXCEPTIONS=TRUE
          },
        ]
        sanitizers: [
          {
            name: "",
            cmake: -DASAN_ENABLED=FALSE
          }
        ]

    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=cl
        -DCMAKE_C_COMPILER=cl
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        ${{ matrix.exceptions.cmake }}
        ${{ matrix.sanitizers.cmake }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config RelWithDebInfo --parallel

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config RelWithDebInfo --output-on-failure
    
    - name: Archive run logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: msvc-run-logs${{matrix.sanitizers.name}}${{matrix.exceptions.name}}
        path: ${{ steps.strings.outputs.build-output-dir }}/Testing/Temporary/LastTest.log

  build-android:
    if: false
    runs-on: macos-13
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'adopt'
          cache: 'gradle'
        
      - name: Run connected tests
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          working-directory: ./tests/AndroidGoogleTest
          script: ./gradlew connectedCheck

  build-mac:
    strategy:
      fail-fast: true
      matrix:
        os: [macos-14, macos-13]
        exceptions: [
          {
            name: "",
            cmake: -DASYNC_CORO_NO_EXCEPTIONS=FALSE
          },
          {
            name: "-noexcept",
            cmake: -DASYNC_CORO_NO_EXCEPTIONS=TRUE
          },
        ]
        sanitizers: [
          {
            name: "",
            cmake: -DASAN_ENABLED=FALSE
          },
          {
            name: "-asan",
            cmake: -DASAN_ENABLED=TRUE
          }
        ]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DASAN_ENABLED=TRUE
        ${{ matrix.exceptions.cmake }}
        ${{ matrix.sanitizers.cmake }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --output-on-failure
    
    - name: Archive run logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.os}}-run-logs${{matrix.sanitizers.name}}${{matrix.exceptions.name}}
        path: ${{ steps.strings.outputs.build-output-dir }}/Testing/Temporary/LastTest.log

  dispatch-pr:
    needs: [build-gcc, build-clang, build-msvc, build-mac]
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Trigger gatekeeper for PR approval
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: check-finished
          client-payload: |
            {
              "sha": "${{ github.event.pull_request.head.sha }}",
              "future_sha": "${{ github.sha }}",
              "pr": "${{ github.event.pull_request.number }}"
            }

        